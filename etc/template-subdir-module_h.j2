{%set MODULE_NAME = SUBDIR_NAME|lower|replace('-','_') -%}
#pragma once
#ifndef {{MODULE_NAME|upper}}_H
#define {{MODULE_NAME|upper}}_H
//////////////////////////////////////
#include <ctype.h>
#include <stdio.h>
#include <assert.h>
#include <err.h>
#include <errno.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <unistd.h>
#include <inttypes.h>
//////////////////////////////////////
#include "module/def.h"
#include "module/module.h"
#include "module/require.h"
//////////////////////////////////////
enum {{MODULE_NAME}}_log_mode_t {
  {{MODULE_NAME|upper}}_LOG_MODE_NONE = 1,
  {{MODULE_NAME|upper}}_LOG_MODE_ERROR,
  {{MODULE_NAME|upper}}_LOG_MODE_INFO,
  {{MODULE_NAME|upper}}_LOG_MODE_DEBUG,
  {{MODULE_NAME|upper}}_LOG_MODES_QTY,
};

module({{MODULE_NAME}}) {
  define({{MODULE_NAME}}, CLIB_MODULE);
  enum {{MODULE_NAME}}_log_mode_t log_mode;
};

int {{MODULE_NAME}}_init(module({{MODULE_NAME}}) *exports);
void {{MODULE_NAME}}_deinit(module({{MODULE_NAME}}) *exports);

exports({{MODULE_NAME}}) {
  .log_mode     = {{MODULE_NAME|upper}}_LOG_MODE_NONE,
  .init     = {{MODULE_NAME}}_init,
  .deinit   = {{MODULE_NAME}}_deinit,
};

#define {{MODULE_NAME}}_m        module({{MODULE_NAME}})

#endif
